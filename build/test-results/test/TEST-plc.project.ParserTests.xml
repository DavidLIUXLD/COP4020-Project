<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="plc.project.ParserTests" tests="30" skipped="0" failures="0" errors="0" timestamp="2021-02-25T04:45:00" hostname="DESKTOP-66C5JIH" time="0.399">
  <properties/>
  <testcase name="testExample1()" classname="plc.project.ParserTests" time="0.089"/>
  <testcase name="[1] For, [IDENTIFIER=FOR@0, IDENTIFIER=elem@6, IDENTIFIER=IN@9, IDENTIFIER=list@12, IDENTIFIER=DO@17, IDENTIFIER=stmt@20, OPERATOR=;@24, IDENTIFIER=END@26], For{name='elem', value=Ast.Expr.Access{receiver=Optional.empty, name='list'}, statements=[Ast.Stmt.Expression{expression=Ast.Expr.Access{receiver=Optional.empty, name='stmt'}}]}" classname="plc.project.ParserTests" time="0.069"/>
  <testcase name="[1] Variable, [IDENTIFIER=name@0], Ast.Expr.Access{receiver=Optional.empty, name='name'}" classname="plc.project.ParserTests" time="0.003"/>
  <testcase name="[2] Field Access, [IDENTIFIER=obj@0, OPERATOR=.@3, IDENTIFIER=field@4], Ast.Expr.Access{receiver=Optional[Ast.Expr.Access{receiver=Optional.empty, name='obj'}], name='field'}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[1] Grouped Variable, [OPERATOR=(@0, IDENTIFIER=expr@1, OPERATOR=)@5], Ast.Expr.Group{expression=Ast.Expr.Access{receiver=Optional.empty, name='expr'}}" classname="plc.project.ParserTests" time="0.003"/>
  <testcase name="[2] Grouped Binary, [OPERATOR=(@0, IDENTIFIER=expr1@1, OPERATOR=+@7, IDENTIFIER=expr2@9, OPERATOR=)@14], Ast.Expr.Group{expression=Ast.Expr.Binary{operator='+', left=Ast.Expr.Access{receiver=Optional.empty, name='expr1'}, right=Ast.Expr.Access{receiver=Optional.empty, name='expr2'}}}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[1] Boolean Literal, [IDENTIFIER=TRUE@0], Ast.Expr.Literal{literal=true}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[2] Integer Literal, [INTEGER=1@0], Ast.Expr.Literal{literal=1}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[3] Decimal Literal, [DECIMAL=2.0@0], Ast.Expr.Literal{literal=2.0}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[4] Character Literal, [CHARACTER='c'@0], Ast.Expr.Literal{literal=c}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[5] String Literal, [STRING=&quot;string&quot;@0], Ast.Expr.Literal{literal=string}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[6] Escape Character, [STRING=&quot;Hello,\nWorld!&quot;@0], Ast.Expr.Literal{literal=Hello,&#10;World!}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[1] While, [IDENTIFIER=WHILE@0, IDENTIFIER=expr@6, IDENTIFIER=DO@11, IDENTIFIER=stmt@14, OPERATOR=;@18, IDENTIFIER=END@20], Ast.Stmt.While{condition=Ast.Expr.Access{receiver=Optional.empty, name='expr'}, statements=[Ast.Stmt.Expression{expression=Ast.Expr.Access{receiver=Optional.empty, name='stmt'}}]}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[1] Return Statement, [IDENTIFIER=RETURN@0, IDENTIFIER=expr@7, OPERATOR=;@11], Ast.Stmt.Return{value=Ast.Expr.Access{receiver=Optional.empty, name='expr'}}" classname="plc.project.ParserTests" time="0.005"/>
  <testcase name="[1] Zero Arguments, [IDENTIFIER=name@0, OPERATOR=(@4, OPERATOR=)@5], Ast.Expr.Function{receiver=Optional.empty, name='name', arguments=[]}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[2] Multiple Arguments, [IDENTIFIER=name@0, OPERATOR=(@4, IDENTIFIER=expr1@5, OPERATOR=,@10, IDENTIFIER=expr2@12, OPERATOR=,@17, IDENTIFIER=expr3@19, OPERATOR=)@24], Ast.Expr.Function{receiver=Optional.empty, name='name', arguments=[Ast.Expr.Access{receiver=Optional.empty, name='expr1'}, Ast.Expr.Access{receiver=Optional.empty, name='expr2'}, Ast.Expr.Access{receiver=Optional.empty, name='expr3'}]}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[3] Method Call, [IDENTIFIER=obj@0, OPERATOR=.@3, IDENTIFIER=method@4, OPERATOR=(@10, OPERATOR=)@11], Ast.Expr.Function{receiver=Optional[Ast.Expr.Access{receiver=Optional.empty, name='obj'}], name='method', arguments=[]}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[1] Assignment, [IDENTIFIER=name@0, OPERATOR==@5, IDENTIFIER=value@7, OPERATOR=;@12], Ast.Stmt.Assignment{receiver=Ast.Expr.Access{receiver=Optional.empty, name='name'}, value=Ast.Expr.Access{receiver=Optional.empty, name='value'}}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[1] Definition, [IDENTIFIER=LET@-1, IDENTIFIER=name@-1, OPERATOR=;@-1], Ast.Stmt.Declaration{name='name', value=Optional.empty}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[2] Initialization, [IDENTIFIER=LET@0, IDENTIFIER=name@4, OPERATOR==@9, IDENTIFIER=expr@11, OPERATOR=;@15], Ast.Stmt.Declaration{name='name', value=Optional[Ast.Expr.Access{receiver=Optional.empty, name='expr'}]}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[1] If, [IDENTIFIER=IF@0, IDENTIFIER=expr@3, IDENTIFIER=DO@8, IDENTIFIER=stmt@11, OPERATOR=;@15, IDENTIFIER=END@17], Ast.Stmt.If{condition=Ast.Expr.Access{receiver=Optional.empty, name='expr'}, thenStatements=[Ast.Stmt.Expression{expression=Ast.Expr.Access{receiver=Optional.empty, name='stmt'}}], elseStatements=[]}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[2] Else, [IDENTIFIER=IF@0, IDENTIFIER=expr@3, IDENTIFIER=DO@8, IDENTIFIER=stmt1@11, OPERATOR=;@16, IDENTIFIER=ELSE@18, IDENTIFIER=stmt2@23, OPERATOR=;@28, IDENTIFIER=END@30], Ast.Stmt.If{condition=Ast.Expr.Access{receiver=Optional.empty, name='expr'}, thenStatements=[Ast.Stmt.Expression{expression=Ast.Expr.Access{receiver=Optional.empty, name='stmt1'}}], elseStatements=[Ast.Stmt.Expression{expression=Ast.Expr.Access{receiver=Optional.empty, name='stmt2'}}]}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[1] Binary And, [IDENTIFIER=expr1@0, IDENTIFIER=AND@6, IDENTIFIER=expr2@10], Ast.Expr.Binary{operator='AND', left=Ast.Expr.Access{receiver=Optional.empty, name='expr1'}, right=Ast.Expr.Access{receiver=Optional.empty, name='expr2'}}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[2] Binary Equality, [IDENTIFIER=expr1@0, OPERATOR===@6, IDENTIFIER=expr2@9], Ast.Expr.Binary{operator='==', left=Ast.Expr.Access{receiver=Optional.empty, name='expr1'}, right=Ast.Expr.Access{receiver=Optional.empty, name='expr2'}}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[3] Binary Addition, [IDENTIFIER=expr1@0, OPERATOR=+@6, IDENTIFIER=expr2@8], Ast.Expr.Binary{operator='+', left=Ast.Expr.Access{receiver=Optional.empty, name='expr1'}, right=Ast.Expr.Access{receiver=Optional.empty, name='expr2'}}" classname="plc.project.ParserTests" time="0.003"/>
  <testcase name="[4] Binary Multiplication, [IDENTIFIER=expr1@0, OPERATOR=*@6, IDENTIFIER=expr2@8], Ast.Expr.Binary{operator='*', left=Ast.Expr.Access{receiver=Optional.empty, name='expr1'}, right=Ast.Expr.Access{receiver=Optional.empty, name='expr2'}}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[1] Function Expression, [IDENTIFIER=name@0, OPERATOR=(@4, OPERATOR=)@5, OPERATOR=;@6], Ast.Stmt.Expression{expression=Ast.Expr.Function{receiver=Optional.empty, name='name', arguments=[]}}" classname="plc.project.ParserTests" time="0.001"/>
  <testcase name="[1] Zero Statements, [], Ast.Source{fields=[]functions=[]}" classname="plc.project.ParserTests" time="0.002"/>
  <testcase name="[2] Field, [IDENTIFIER=LET@0, IDENTIFIER=name@4, OPERATOR==@9, IDENTIFIER=expr@11, OPERATOR=;@15], Ast.Source{fields=[Ast.Field{name='name', value=Optional[Ast.Expr.Access{receiver=Optional.empty, name='expr'}]}]functions=[]}" classname="plc.project.ParserTests" time="0.003"/>
  <testcase name="[3] Method, [IDENTIFIER=DEF@0, IDENTIFIER=name@4, OPERATOR=(@8, OPERATOR=)@9, IDENTIFIER=DO@11, IDENTIFIER=stmt@14, OPERATOR=;@18, IDENTIFIER=END@20], Ast.Source{fields=[]functions=[Ast.Function{name='name', parameters=[], statements=[Ast.Stmt.Expression{expression=Ast.Expr.Access{receiver=Optional.empty, name='stmt'}}]}]}" classname="plc.project.ParserTests" time="0.001"/>
  <system-out><![CDATA[Ast.Expr.Literal{literal=1}
Ast.Expr.Access{receiver=Optional.empty, name='expr'}
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
